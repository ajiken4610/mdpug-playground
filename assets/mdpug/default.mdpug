# MDPug
**Markdown + Pug**
You can write Markdown at the top level of the source.
In Markdown, you can write Pug using `!pug`block.
In Pug statements, you can write Markdown using `+md`, `md()` or `:md`.

````!pug
style.
  h1, h2, h3, h4, h5, h6 {
    margin-top: .5rem;
    margin-bottom: .5rem;
    border-bottom: 1px solid gray;
    border-radius: 10px;
    padding-right: 10px;
    padding-left: 10px;
  }
mixin section(title,i)
  +md #{"#".repeat(i)} #{title}
  +md!= block && b(block)

mixin example(title)
  +section(title,2)
  - var source = b(block)
  +section("Source",3).
    ````md
    !{source}
    ````
  +section("Result",3)!= source

+example("Markdown").
  #### title
  This is **Markdown-decorated** text.

+example("Pug in Markdown").
  ```!pug
  div hello
  ```
+example("*STATIC* Markdown in Pug in Markdown").
  ```!pug
  - for(var i = 0;i < 3;i++)
    :md > No variables can be used here. So, this won't work: \\#{i} or ${i}
  ```

+example("*DYNAMIC* Markdown in Pug in Markdown").
  ```!pug
  - for(var i = 0;i < 3;i++)
    +md > Variables can be used here: \#{i}
  ```

+example("Declared functions, variables, mixins and filters which can be used in Pug statements").
  #### r(html)
  `r(html)` will render HTML received in arguments.
  This is commonly used with md() or b(block) function.
  ```!pug
  - r(`<em>ITALIC TEXT</em>`)
  ```
  #### b(block)
  `b(block)` will return mixin block as string.
  See console.
  ```!pug
  mixin test
    - block && console.log(b(block))
  +test
  +test This text will appear in console.
  ```
  #### s
  `s` represents the top-level Pug (Pug top-level, not Markdown) source code.
  ```!pug
  small #{s}
  ```
  #### :md markdown
  `:md markdown` allows you to write STATIC Markdown in Pug.
  Please note that **NO** variables defined in Pug can be used within this filter.
  ```!pug
  :md > This statement is **decorated** using Markdown.
  ```
  #### +md markdown
  `+md markdown` compiles the Markdown received as a block into HTML and render it.
  ```!pug
  - var text = "This is the text declared within variable."
  +md.
    > This text is **decorated** within Markdown.
    > Variables can be used here: \#{text}
  ```
  #### md(markdown)
  `md(markdown)` compiles the Markdown received as an argument into HTML and returns it.
  This is commonly used with r() function.
  ```!pug
  - r(md(`> Random number: \`${Math.random()}\``))
  ```
````
